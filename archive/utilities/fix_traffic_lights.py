"""
fix_traffic_lights.py - Fix or regenerate traffic light configuration
Run this to fix the traffic light issue
"""

import os
import xml.etree.ElementTree as ET
import sumolib

def analyze_traffic_lights():
    """Analyze what traffic lights are actually in the network"""
    
    print("üö¶ Analyzing traffic lights in network...")
    
    net_file = "data/sumo/manhattan.net.xml"
    if not os.path.exists(net_file):
        print("‚ùå Network file not found")
        return []
    
    # Load network
    net = sumolib.net.readNet(net_file)
    
    # Get all traffic light IDs
    tls_ids = []
    for node in net.getNodes():
        if node.getType() == "traffic_light":
            tls_ids.append(node.getID())
    
    print(f"‚úÖ Found {len(tls_ids)} traffic lights in network")
    
    if tls_ids:
        print("Sample TLS IDs:", tls_ids[:5])
    
    return tls_ids

def create_minimal_traffic_lights(tls_ids=None):
    """Create a minimal working traffic lights file"""
    
    print("\nüîß Creating minimal traffic lights configuration...")
    
    # If no TLS IDs provided, just create empty file
    if not tls_ids:
        # Create empty additional file (no traffic light programs)
        xml_content = '''<?xml version="1.0" encoding="UTF-8"?>
<additional>
    <!-- Traffic light programs will be auto-generated by SUMO -->
</additional>'''
        
        with open('data/sumo/traffic_lights.add.xml', 'w') as f:
            f.write(xml_content)
        
        print("‚úÖ Created empty traffic lights file (SUMO will use defaults)")
        return True
    
    # Create basic programs for known traffic lights
    root = ET.Element('additional')
    
    # Add a simple program for each traffic light
    for tls_id in tls_ids[:10]:  # Just do first 10 for testing
        tls = ET.SubElement(root, 'tlLogic')
        tls.set('id', tls_id)
        tls.set('type', 'static')
        tls.set('programID', '0')
        tls.set('offset', '0')
        
        # Simple 2-phase program (NS green, then EW green)
        # Phase 1: North-South Green
        phase1 = ET.SubElement(tls, 'phase')
        phase1.set('duration', '35')
        phase1.set('state', 'GGggrrrrGGggrrrr')  # Simplified
        
        # Phase 2: North-South Yellow
        phase2 = ET.SubElement(tls, 'phase')
        phase2.set('duration', '3')
        phase2.set('state', 'yyyyrrrryyyyrrrr')
        
        # Phase 3: East-West Green
        phase3 = ET.SubElement(tls, 'phase')
        phase3.set('duration', '35')
        phase3.set('state', 'rrrrGGggrrrrGGgg')
        
        # Phase 4: East-West Yellow
        phase4 = ET.SubElement(tls, 'phase')
        phase4.set('duration', '3')
        phase4.set('state', 'rrrryyyyrrrryyyy')
    
    # Write file
    tree = ET.ElementTree(root)
    tree.write('data/sumo/traffic_lights.add.xml', encoding='utf-8', xml_declaration=True)
    
    print(f"‚úÖ Created traffic light programs for {min(10, len(tls_ids))} intersections")
    return True

def backup_and_fix():
    """Backup current file and create a working one"""
    
    print("\n" + "="*60)
    print("FIXING TRAFFIC LIGHTS CONFIGURATION")
    print("="*60)
    
    tl_file = 'data/sumo/traffic_lights.add.xml'
    
    # Backup existing file if it exists
    if os.path.exists(tl_file):
        backup_file = tl_file + '.backup'
        os.rename(tl_file, backup_file)
        print(f"üìÅ Backed up existing file to {backup_file}")
    
    # Analyze network
    tls_ids = analyze_traffic_lights()
    
    # Create new minimal file
    create_minimal_traffic_lights([])  # Empty for now - let SUMO handle it
    
    print("\n‚úÖ Fixed! Traffic lights will use SUMO defaults")
    print("="*60)
    
    return True

def test_fixed_configuration():
    """Test that SUMO can now start"""
    
    print("\nüß™ Testing fixed configuration...")
    
    import traci
    
    net_file = "data/sumo/manhattan.net.xml"
    
    cmd = [
        "sumo",
        "-n", net_file,
        "--step-length", "0.1",
        "--no-warnings",
        "--no-step-log",
        "--quit-on-end",
        "--end", "10"
    ]
    
    # Add additional files
    additional_files = []
    if os.path.exists("data/sumo/types.add.xml"):
        additional_files.append("data/sumo/types.add.xml")
    if os.path.exists("data/sumo/traffic_lights.add.xml"):
        additional_files.append("data/sumo/traffic_lights.add.xml")
    
    if additional_files:
        cmd.extend(["-a", ",".join(additional_files)])
    
    try:
        traci.start(cmd)
        print("‚úÖ SUMO started successfully with fixed configuration!")
        
        # Run a few steps
        for i in range(10):
            traci.simulationStep()
        
        traci.close()
        print("‚úÖ Simulation ran without errors!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        try:
            traci.close()
        except:
            pass
        return False

if __name__ == "__main__":
    # Fix the configuration
    if backup_and_fix():
        # Test it works
        test_fixed_configuration()
    
    print("\nüìã Next steps:")
    print("1. Run: python test_sumo_vehicles.py")
    print("2. If that works, run: python main_complete_integration.py")
    print("3. Click 'Start Vehicles' in the web interface")